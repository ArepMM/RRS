#include    "pneumo-splitter.h"

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
PneumoSplitter::PneumoSplitter(double work_volume, QObject *parent) : BrakeDevice(parent)
  , V0(work_volume)
  , pIN(0.0)
  , p1(0.0)
  , p2(0.0)
  , QIN(0.0)
  , Q1(0.0)
  , Q2(0.0)
{
    std::fill(K.begin(), K.end(), 0.0);
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
PneumoSplitter::~PneumoSplitter()
{

}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void PneumoSplitter::setInputPressure(double value)
{
    pIN = value;
    is_set_pressure = true;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
double PneumoSplitter::getSumFlow() const
{
    return - Q1 - Q2;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void PneumoSplitter::setInputFlow(double value)
{
    QIN = value;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
double PneumoSplitter::getInputPressure() const
{
    return getY(0);
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void PneumoSplitter::setPipePressure1(double value)
{
    p1 = value;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
double PneumoSplitter::getPipeFlow1() const
{
    return Q1;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void PneumoSplitter::setPipePressure2(double value)
{
    p2 = value;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
double PneumoSplitter::getPipeFlow2() const
{
    return Q2;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void PneumoSplitter::preStep(state_vector_t &Y, double t)
{
    Q_UNUSED(t)

    double Q_1_2 = K[3] * (p1 - p2);
    Q1 = K[1] * (Y[0] - p1) - Q_1_2;
    Q2 = K[2] * (Y[0] - p2) + Q_1_2;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void PneumoSplitter::ode_system(const state_vector_t &Y,
                                state_vector_t &dYdt,
                                double t)
{
    Q_UNUSED(Y)
    Q_UNUSED(t)

    // Проверям, задавалось ли давление в камере напрямую
    if (is_set_pressure)
    {
        setY(0, pIN);
        QIN = 0.0;
    }

    is_set_pressure = false;
    dYdt[0] = (QIN - Q1 - Q2) / V0;
}

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
void PneumoSplitter::load_config(CfgReader &cfg)
{
    QString secName = "Device";

    for (size_t i = 1; i < K.size(); ++i)
    {
        QString coeff = QString("K%1").arg(i);
        cfg.getDouble(secName, coeff, K[i]);
    }

    double tmp = 0.0;
    cfg.getDouble(secName, "V0", tmp);
    if (tmp > 1e-3)
        V0 = tmp;
}
